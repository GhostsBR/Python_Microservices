import os
import string
from validate_docbr import CPF
from Model import StatusModel
sm = StatusModel
from dotenv import load_dotenv
load_dotenv()
from email_validator import validate_email, EmailNotValidError


class InputControl:
    def verify_auth(self, req:dict) -> bool:
        try:
            req['auth']
        except:
            return False
        if not req['auth'] == os.getenv('AUTH_KEY'): return False
        return True

    def verify_id(self, req:dict) -> sm:
        try:
            req['id']
        except:
            return sm.StatusModel("Error: Unknow id in json.", 400)
    
    def verify_user_requirements(self, req: dict) -> sm:
        try:
            req['id']
            req['updated_at']
        except:
            return sm.StatusModel("Error: cannot get (id, created_at or update_at) generated by server", 500)
        try:
            req['name']
            req['cpf']
            req['email']
            req['phone_number']
        except:
            return sm.StatusModel("Error: json need has (name, cpf, email, phone_number)", 400)
        not_valid_name = self.validate_name(req['name'])
        if not_valid_name and not not_valid_name.code == 200: return not_valid_name
        if not self.validate_cpf(req['cpf']): return sm.StatusModel("Error: Invalid CPF!", 400)
        if not self.validate_email(req['email']): return sm.StatusModel("Error: Invalid Email!", 400)

    def validate_name(self, name:str) -> sm:
        if not " " in name:
            return sm.StatusModel("Error: invalid name field, need has a full name.", 400)
        for i in name:
            if not i in string.ascii_letters and not i == " " and not i == "é" and not i == "ã" and not i == "â":
                return sm.StatusModel("Error: Invalid name field, need has only letters", 400)
        return sm.StatusModel("sucess!", 200)

    def validate_cpf(self, cpf:str) -> bool:
        if CPF().validate(cpf):
            return True
        else:
            return False
    
    def validate_email(self, email:str) -> bool:
        try:
            valid = validate_email(email, allow_smtputf8=True, check_deliverability=True)
            email = valid.email
        except EmailNotValidError:
            return False
        return True